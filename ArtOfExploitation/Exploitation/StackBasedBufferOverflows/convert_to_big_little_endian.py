from sys import argv, exit

def to_little_endian(mem_addr:str):
    mem_addr=mem_addr.replace("0x", "")
    l=[]
    if len(mem_addr) % 2 != 0:
        print(f"Memory address length must be even")
        exit(1)
    for i in range(len(mem_addr)-1, -1, -2):
        l.append(mem_addr[i-1]+mem_addr[i])
    return "\\x"+"\\x".join(l)

def to_big_endian(mem_addr:str):
    mem_addr=mem_addr.replace("0x", "")
    l=[]
    if len(mem_addr) % 2 != 0:
        print(f"Memory address length must be even")
        exit(1)
    for i in range(0, len(mem_addr), 2):
        l.append(mem_addr[i]+mem_addr[i+1])
    return "\\x"+"\\x".join(l) 

if __name__ == "__main__":
    if len(argv) < 2:
        print(f"Usage: {__file__} <memory_address_to_convert_to_little_endian")
        exit(1)

    le=to_little_endian(argv[1])
    be=to_big_endian(argv[1])

    print(f"Memory address: {argv[1]}")
    print(f"Little Endian: '{le}'")
    print(f"Big Endian: '{be}'")

