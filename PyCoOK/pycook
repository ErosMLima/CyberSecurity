#!/usr/bin/env python3

__author__  = "Alexis Rodriguez"
__date__    = 12_12_2020

from colored import fg, attr
from sys import exit, argv
from os.path import exists, isdir, isfile
from utils.prog_args import arg_parse, hash_cmd_custom_help
from random import randint

# encoding
from src.encoding.url import URL 
from src.encoding.hex import Hex
from src.encoding.bases import Bases
from src.encoding.binary import Binary

# hashing
from src.hashing.hashes import Hashes

# encryption

# compression

# http
from src.http.simple_server import SServer

# reverse shells
from src.revshells.payloads import Payloads

# pattern
from src.pattern.create import PatternCreate
from src.pattern.offset import PatternOffset


color = lambda s: ("%s" + s + "%s") % (fg(randint(1, 220)), attr(0))
is_file = lambda s: exists(s) and isfile(s)

def get_file_data(file_: str):
    with open(file_) as f:
        return f.read()

def base_cmd(args):
    if is_file(args.ARG):
        args.ARG = get_file_data(args.ARG)
    b = Bases(args.ARG)
    if args.base85:
        print(color("Base85:"), b.eighty_five())
    if args.from_base85:
        print(color("From Base85:"), b.eighty_five_decode())
    if args.base64:
        print(color("Base64:"), b.sixty_four())
    if args.from_base64:
        print(color("From Base64:"), b.sixty_four_decode())
    if args.base32:
        print(color("Base32:"), b.thirty_two())
    if args.from_base32:
        print(color("From Base32:"), b.thirty_two_decode())
    if args.base16:
        print(color("Base16:"), b.sixteen())
    if args.from_base16:
        print(color("From Base16:"), b.sixteen_decode())

def bin_cmd(args):
    if is_file(args.ARG):
         args.ARG = get_file_data(args.ARG)
    b = Binary(args.Args)
    if args.binary:
        print(color("Binary:"), b.to_bin())
    if args.from_binary:
        print(color("From Binary:"), b.from_bin())

def hex_cmd(args):
    if is_file(args.ARG):
         args.ARG = get_file_data()
    h = Hex(args.ARG)
    if args.hexadecimal:
        print(color("Hex:"), h.hx())
    elif args.from_hexadecimal:
        print(color("From Hex:"), h.from_hx())
    if args.hexdump: h.hxd()

def url_cmd(args):
    u = URL(args.ARG)
    if args.url_encode:
        print(color("URL Encoded:"), u.url_encode())
    if args.url_decode:
        print(color("URL Decoded:"), u.url_decode())
    if args.url_encode_plus:
        print(color("URL Encoded+:"), u.url_encode_plus())
    if args.url_decode_plus:
        print(color("URL Decoded+:"), u.url_decode_plus())
    if args.parse_query:
        print(color("Parsed Query String:"), u.parse_query_string())

def hash_cmd(args):
    h = Hashes(args.ARG, args.hash_algo)
    if args.hash_algo:
        for msg, algo in h.get_hash():
            print(color(msg), algo)

def http_cmd(args):
    if args.simple_server: SServer(args.port).run()

def revs_cmd(args):
    p = Payloads(args.IP, args.port)

    if args.list_rev_shells:
        p.list_shells()
        return
    elif args.revshell:
        if (shell := p.get_shell(args.revshell)) != None:
            print(color("Your Reverse Shell:"), shell)
        else:
            return

def ptn_cmd(args):
    if args.create:
        c = PatternCreate(int(args.pattern_length))
        pattern = c.create()
        print(color("Pattern:"), pattern)
    elif args.get_offset:
        o = PatternOffset(args.mem_address)
        print(color("Offset At:"), o.offset())

def banner():
    return """\
 ______   __  __   ______   ______   ______   ___   ___     
/_____/\ /_/\/_/\ /_____/\ /_____/\ /_____/\ /___/\/__/\    
\:::_ \ \\\\ \ \ \ \\\\:::__\/ \:::_ \ \\\\:::_ \ \\\\::.\ \\\\ \ \   
 \:(_) \ \\\\:\_\ \ \\\\:\ \  __\:\ \ \ \\\\:\ \ \ \\\\:: \/_) \ \  
  \: ___\/ \::::_\/ \:\ \/_/\\\\:\ \ \ \\\\:\ \ \ \\\\:. __  ( (  
   \ \ \     \::\ \  \:\_\ \ \\\\:\_\ \ \\\\:\_\ \ \\\\: \ )  \ \ 
    \_\/      \__\/   \_____\/ \_____\/ \_____\/ \__\/\__\/ 
"""

def main():
    p = arg_parse()

    if len(argv) < 2: 
        print(banner())
        p.print_help()
        exit(0)

    if (argv[1].strip() == "hash" and
        (len(argv) < 3 or "-h" in argv[2:] or "--help" in argv[2:])
        ):
        print(hash_cmd_custom_help())
        exit(0)

    args = p.parse_args()
    if (args.cmd and len(argv) < 3):
        p.print_help()
        exit(0)
    else: del p


    if args.cmd == "base":
        base_cmd(args)
    elif args.cmd == "bin":
        bin_cmd(args)
    elif args.cmd == "hex":
        hex_cmd(args)
    elif args.cmd == "url":
        url_cmd(args)
    elif args.cmd == "hash":
        hash_cmd(args)
    elif args.cmd == "http":
        http_cmd(args)
    elif args.cmd == "revs":
        revs_cmd(args)
    elif args.cmd == "ptn":
        ptn_cmd(args)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print('\n'+color("Goodbye..."))
    #except:
       # print('\n'+color("An error occured... review your syntax"))

